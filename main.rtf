{\rtf1\ansi\ansicpg949\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15620\viewh11420\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 from fastapi import FastAPI, HTTPException, Request, Response\
from pydantic import BaseModel, Field, ValidationError\
from fastapi.responses import JSONResponse\
from fastapi.exceptions import RequestValidationError\
from typing import Optional\
import math\
import uvicorn\
import sqlite3\
\
app = FastAPI()\
\
\
\
class Product(BaseModel):\
    name: str = Field(..., max_length=8, pattern=r'^[A-Za-z]+$')\
    amount: Optional[int] = 1\
    price: Optional[float] = None\
\
\
def get_db_connection():\
    conn = sqlite3.connect('stocks.db')\
    conn.row_factory = sqlite3.Row\
    return conn\
\
\
@app.post("/v1/stocks")\
def create_or_update_stocks(product: Product, response: Response):\
    conn = get_db_connection()\
    cursor = conn.cursor()\
    cursor.execute('SELECT amount FROM stocks WHERE name = ?', (product.name,))\
    item = cursor.fetchone()\
    if item:\
        new_amount = item['amount'] + product.amount\
        cursor.execute('UPDATE stocks SET amount = ? WHERE name = ?', (new_amount, product.name))\
    else:\
        cursor.execute('INSERT INTO stocks (name, amount) VALUES (?, ?)', (product.name, product.amount))\
    conn.commit()\
    conn.close()\
    return \{"name": product.name, "amount": product.amount\}\
\
\
@app.get("/v1/stocks/\{name\}")\
def check_stocks(name: str):\
    conn = get_db_connection()\
    cursor = conn.cursor()\
\
    cursor.execute('SELECT amount FROM stocks WHERE name = ?', (name,))\
    item = cursor.fetchone()\
\
    if item:\
        return \{name: item[0]\}\
    else:\
        raise HTTPException(status_code=404, detail="Item not found")\
\
\
@app.get("/v1/stocks")\
def check_all_stocks():\
    conn = get_db_connection()\
    cursor = conn.cursor()\
\
    cursor.execute('SELECT name, amount FROM stocks WHERE amount > 0 ORDER BY name')\
    items = cursor.fetchall()\
    conn.close()\
\
    return \{item[0]: item[1] for item in items\}\
\
\
\
@app.post("/v1/sales")\
def sales(product: Product, response: Response):\
    conn = get_db_connection()\
    cursor = conn.cursor()\
\
    cursor.execute('SELECT amount FROM stocks WHERE name = ?', (product.name,))\
    stock_item = cursor.fetchone()\
    if not stock_item or stock_item[0] < product.amount:\
        conn.close()\
        raise HTTPException(status_code=404, detail="Not enough stock or item not found")\
    cursor.execute('UPDATE stocks SET amount = ? WHERE name = ?', (new_amount, product.name))\
\
    cursor.execute('INSERT INTO sales (name, amount, price) VALUES (?, ?, ?)', (product.name, product.amount, product.price))\
\
    conn.commit()\
    conn.close()\
    return \{"name": product.name, "amount": product.amount, "price": product.price\}\
\
\
@app.get("/v1/sales")\
def check_sales():\
        conn = get_db_connection()\
        cursor = conn.cursor()\
\
        cursor.execute("SELECT price, amount FROM sales")\
        sales_records = cursor.fetchall()\
        conn.close()\
\
        total_sales = sum(record[0] * record[1] for record in sales_records if record[0] is not None)\
        total_sales = round(total_sales, 1)\
        if (total_sales * 10) % 1 > 0:\
          total_sales += 0.1\
        total_sales_formatted = "\{:.1f\}".format(total_sales)\
\
\
\
\
@app.delete("/v1/stocks")\
def delete_stocks_and_sales():\
    conn = get_db_connection()\
    conn.execute('DELETE FROM stocks')\
    conn.execute('DELETE FROM sales')\
    conn.commit()\
    conn.close()\
    return \{"message": "Stocks and sales are deleted"\}\
\
\
\
@app.exception_handler(RequestValidationError)\
async def validation_exception_handler(request: Request, exc: RequestValidationError):\
    return JSONResponse(\
        status_code=400,\
        content=\{"message": "ERROR"\},\
    )}